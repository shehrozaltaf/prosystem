<?phpdefined('BASEPATH') OR exit('No direct script access allowed');header('Access-Control-Allow-Origin: *');error_reporting(0);ini_set('memory_limit', '256M'); // This also needs to be increased in some cases. Can be changed to a higher value as per need)ini_set('sqlsrv.ClientBufferMaxKBSize', '524288'); // Setting to 512Mini_set('pdo_sqlsrv.client_buffer_max_kb_size', '524288');defined('BASEPATH') OR exit('No direct script access allowed');class Login extends CI_Controller{    public function __construct()    {        parent::__construct();        $this->load->model('mlogin');    }    function index($msg = NULL)    {        $data = array();        $Login = new MLogin();        $SeesionInfo = $this->session->all_userdata();        if (isset($_SESSION['login']['idUser'])) {            redirect(base_url('index.php/hr_controllers/employee_entry'), refresh);        } else {            $this->load->view('auth/login', $data);        }    }    // Function to get the client IP address    function getLogin()    {        if (isset($_POST['g-recaptcha-response']) && $_POST['g-recaptcha-response'] != '' && $_POST['g-recaptcha-response'] != null) {            $captcha = $_POST['g-recaptcha-response'];            $secret = '6LeJq30aAAAAAF0vyryRmY1DxNIusaj5OE4c3XNb';            $response = file_get_contents(                "https://www.google.com/recaptcha/api/siteverify?secret=" . $secret . "&response=" . $captcha . "&remoteip=" . $_SERVER['REMOTE_ADDR']            );            // use json_decode to extract json response            $response = json_decode($response);            if ($response->success === false) {                //Do something with error                $result = array('0' => 'Error', '1' => 'Captcha Validation Failed');            }            //... The Captcha is valid you can continue with the rest of your code            //... Add code to filter access using $response . score            if ($response->success == true && $response->score >= 0.5) {                //Do something to denied access                $username = $this->input->post('login_username');                $Password = $this->input->post('login_password');                if (!isset($username) || $username == '' || $username == 'undefined') {                    $result = array('0' => 'Error', '1' => 'Invalid Username');                    $flag = 1;                }                if (!isset($Password) || $Password == '' || $Password == 'undefined') {                    $result = array('0' => 'Error', '1' => 'Invalid Password');                    $flag = 1;                }                $Login = new MLogin();                $this->form_validation->set_rules('login_username', 'UserName', 'required');                $this->form_validation->set_rules('login_password', 'Password', 'required');                $Custom = new Custom();                if ($this->form_validation->run() == FALSE || $flag == 1) {                    $result = array('0' => 'Error', '1' => 'Invalid Username/Password');                } else {                    $login = $Login->validate($username, $Password);                    if (count($login) == 1) {                        if (hash('sha256', $Password) === $login[0]->password) {                            $data = array(                                'idUser' => $login[0]->id,                                'username' => $login[0]->username,                                'idGroup' => $login[0]->idGroup,                                'full_name' => $login[0]->full_name,                                'logged_in' => TRUE                            );                            $this->session->set_userdata('login', $data);                            $result = array('0' => 'Success', '1' => 'Login Successfully');                        } else {                            $result = array('0' => 'Error', '1' => 'Invalid Password');                        }                    } else {                        $result = array('0' => 'Error', '1' => 'Invalid Username/Password');                    }                }                $ip = $this->get_client_ip();                $insert_login = array();                $insert_login['idUser'] = $username;                $insert_login['ip_address'] = $ip;                $insert_login['result'] = $result['1'];                $insert_login['attempted_at'] = date('Y-m-d H:i:s');                $Custom->Insert($insert_login, 'id', 'user_failed_logins', 'N');            } else {                $result = array('0' => 'Error', '1' => 'Captcha Validation Failed');            }        } else {            $result = array('0' => 'Error', '1' => 'Invalid Captcha');        }        echo json_encode($result);    }    function get_client_ip()    {        $ipaddress = '';        if (isset($_SERVER['HTTP_CLIENT_IP']))            $ipaddress = $_SERVER['HTTP_CLIENT_IP'];        else if (isset($_SERVER['HTTP_X_FORWARDED_FOR']))            $ipaddress = $_SERVER['HTTP_X_FORWARDED_FOR'];        else if (isset($_SERVER['HTTP_X_FORWARDED']))            $ipaddress = $_SERVER['HTTP_X_FORWARDED'];        else if (isset($_SERVER['HTTP_FORWARDED_FOR']))            $ipaddress = $_SERVER['HTTP_FORWARDED_FOR'];        else if (isset($_SERVER['HTTP_FORWARDED']))            $ipaddress = $_SERVER['HTTP_FORWARDED'];        else if (isset($_SERVER['REMOTE_ADDR']))            $ipaddress = $_SERVER['REMOTE_ADDR'];        else            $ipaddress = 'UNKNOWN';        return $ipaddress;    }    function getLogin3()    {        if (isset($_POST['g-recaptcha-response']) && $_POST['g-recaptcha-response'] != '' && $_POST['g-recaptcha-response'] != null) {            $captcha = $_POST['g-recaptcha-response'];            $secret = '6LeJq30aAAAAAF0vyryRmY1DxNIusaj5OE4c3XNb';            $response = file_get_contents(                "https://www.google.com/recaptcha/api/siteverify?secret=" . $secret . "&response=" . $captcha . "&remoteip=" . $_SERVER['REMOTE_ADDR']            );            // use json_decode to extract json response            $response = json_decode($response);            if ($response->success === false) {                //Do something with error                $result = array('0' => 'Error', '1' => 'Captcha Validation Failed');            }            //... The Captcha is valid you can continue with the rest of your code            //... Add code to filter access using $response . score            if ($response->success == true && $response->score >= 0.5) {                //Do something to denied access                $username = $this->input->post('login_username');                $Password = $this->input->post('login_password');                if (!isset($username) || $username == '' || $username == 'undefined') {                    $result = array('0' => 'Error', '1' => 'Invalid Username');                    $flag = 1;                }                if (!isset($Password) || $Password == '' || $Password == 'undefined') {                    $result = array('0' => 'Error', '1' => 'Invalid Password');                    $flag = 1;                }                $Login = new MLogin();                $this->form_validation->set_rules('login_username', 'UserName', 'required');                $this->form_validation->set_rules('login_password', 'Password', 'required');                $ip = $this->get_client_ip();                if (isset($_SESSION['bf']['attempt']) && $_SESSION['bf']['attempt'] != '') {                    $attempt = $_SESSION['bf']['attempt'] + 1;                } else {                    $attempt = 1;                }                $bf = array(                    'ip' => $ip,                    'attempt' => $attempt,                    'last_attempted_dt' => date('Y-m-d H:i:s'),                    'logintime' => date('Y-m-d H:i:s', strtotime('+3 minutes'))                );                if ($_SESSION['bf']['attempt'] > 3 && $ip == $_SESSION['bf']['ip']) {                    if (date('Y-m-d H:i:s') >= $_SESSION['bf']['logintime']) {                        $block = 0;                    } else {                        $block = 1;                    }                } else {                    $block = 0;                }                $Custom = new Custom();                if ($block === 0) {                    $flag = 0;                    if ($this->form_validation->run() == FALSE || $flag == 1) {                        $result = array('0' => 'Error', '1' => 'Invalid Username/Password');                    } else {                        $login = $Login->validate($username, $Password);                        if (count($login) == 1) {                            if (hash('sha256', $Password) === $login[0]->password) {                                $data = array(                                    'idUser' => $login[0]->id,                                    'username' => $login[0]->username,                                    'idGroup' => $login[0]->idGroup,                                    'full_name' => $login[0]->full_name,                                    'logged_in' => TRUE                                );                                $this->session->set_userdata('login', $data);                                $result = array('0' => 'Success', '1' => 'Login Successfully');                            } else {                                $result = array('0' => 'Error', '1' => 'Invalid Password');                                $this->session->set_userdata('bf', $bf);                            }                        } else {                            $result = array('0' => 'Error', '1' => 'Invalid Username/Password');                            $this->session->set_userdata('bf', $bf);                        }                    }                } else {                    $result = array('0' => 'Error', '1' => 'Your account is blocked. Please try again after 30 minutes');                }                $insert_login = array();                $insert_login['idUser'] = $username;                $insert_login['ip_address'] = $ip;                $insert_login['result'] = $result['1'];                $insert_login['attempted_at'] = date('Y-m-d H:i:s');                $Custom->Insert($insert_login, 'id', 'user_failed_logins', 'N');            } else {                $result = array('0' => 'Error', '1' => 'Captcha Validation Failed');            }        } else {            $result = array('0' => 'Error', '1' => 'Invalid Captcha');        }        echo json_encode($result);    }    function getLogin2()    {        $ip = $this->get_client_ip();        $username = $this->input->post('login_username');        $Password = $this->input->post('login_password');        if (!isset($username) || $username == '' || $username == 'undefined') {            echo 4;            exit();        }        if (!isset($Password) || $Password == '' || $Password == 'undefined') {            echo 5;            exit();        }        $Login = new MLogin();        $this->form_validation->set_rules('login_username', 'UserName', 'required');        $this->form_validation->set_rules('login_password', 'Password', 'required');        if ($this->form_validation->run() == FALSE) {            echo 3;            exit();        } else {            $result = $Login->validate($username, $Password);            $Custom = new Custom();            if (count($result) == 1) {                if (isset($result[0]->attempt) && $result[0]->attempt <= 3) {                    if (hash('sha256', $Password) === $result[0]->password) {                        $data = array(                            'idUser' => $result[0]->id,                            'username' => $result[0]->username,                            'idGroup' => $result[0]->idGroup,                            'full_name' => $result[0]->full_name,                            'logged_in' => TRUE                        );                        $this->session->set_userdata('login', $data);                        $editArr = array();                        $editArr['attempt'] = 0;                        $editArr['attemptDateTime'] = date('Y-m-d');                        if (isset($result[0]->id) && $result[0]->id != '') {                            $idUser = $result[0]->id;                            $Custom->Edit($editArr, 'id', $idUser, 'users_dash');                        }                        $trackarray = array("action" => "Login Success",                            "result" => "User " . $result[0]->username . ": Login Success");                        $Custom->trackLogs($trackarray, "user_logs");                        echo 1;                    } else {                        $editArr = array();                        $editArr['attempt'] = $result[0]->attempt + 1;                        $editArr['attemptDateTime'] = date('Y-m-d');                        if (isset($result[0]->id) && $result[0]->id != '') {                            $idUser = $result[0]->id;                            $Custom->Edit($editArr, 'id', $idUser, 'users_dash');                        }                        $trackarray = array("action" => "Invalid Password",                            "result" => "User " . $result[0]->username . ": incorrect password");                        $Custom->trackLogs($trackarray, "user_logs");                        echo 2;                    }                } else {                    echo 7;                }            } else {                echo 3;            }        }    }    function getLogout()    {        $Custom = new Custom();        $trackarray = array("action" => "Logout",            "result" => "User " . $_SESSION['login']['username'] . ": Logout");        $Custom->trackLogs($trackarray, "user_logs");        session_destroy();    }    function recover_password()    {        $this->load->view('auth/recover_password');    }    public function forgetPwd_SendEmail()    {        if (isset($_POST['email']) && $_POST['email'] != '') {            $Mlogin = new MLogin();            $ForgetPass = $Mlogin->ForgetPass($_POST['email']);            if (isset($ForgetPass[0]) && $ForgetPass[0]->password != '' && $ForgetPass[0]->email != '') {                $userName = $ForgetPass[0]->username;                $password = $ForgetPass[0]->password;                $email = $ForgetPass[0]->email;                $this->load->library('email');                $Subject = "Recover Password - " . PROJECT_NAME;                $body = '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">                        <html xmlns="http://www.w3.org/1999/xhtml">                        <head>                            <meta http-equiv="Content-Type" content="text/html; charset=' . strtolower(config_item('charset')) . '" />                            <title>' . html_escape($Subject) . '</title>                            <style type="text/css">                                body {                                    font-family: Arial, Verdana, Helvetica, sans-serif;font-size: 16px;                                }                            </style>                        </head>                        <body>                        Dear ' . $userName . ',<br/><br/>                        <p>Your old password is: <strong>' . $password . '</strong>. You can change your password from the <a href="' . base_url() . '">portal</a>.</p>                        <br/>                                                <p style=\'  background-color: yellow; font-weight: 600;\'>Note: This is an automated message, please ignore if the task is completed.</p> <br>                                                <p>Thank you </p>                         <p>Regards,</p>                        <p><a href="' . base_url() . '">' . PROJECT_NAME . '</a></p>                        </body>                        </html>';                $from = 'sk_khan911@hotmail.com';                $to = $email;                $email_setting = array('mailtype' => 'html');                $this->email->initialize($email_setting);                $res = $this->email                    ->from($from)                    ->to($to)                    ->subject($Subject)                    ->message($body)                    ->send();                if ($res) {                    $result = 1;                } else {                    $result = 2;                }            } else {                $result = 3;            }        } else {            $result = 2;        }        echo $result;    }}